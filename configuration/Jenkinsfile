node('maven') {
                 // define commands
                 def mvnCmd = "mvn -s configuration/cicd-settings.xml"
                 def appName = "fis-sb-camel-amq"
                 def devProj = "fis"
                 def stageProj = "fis-stage"
                 stage 'Build'
                 git branch: 'cicd', url: 'https://github.com/srinivasa-vasu/spring-boot-camel-amq.git'
                 def v = version()

                 sh "${mvnCmd} clean install -DskipTests=true"

                 stage 'Test and Analysis'
                 parallel (
                     'Test': {
                         // sh "${mvnCmd} test"
                         // step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                     },
                     'Static Analysis': {
                         sh "${mvnCmd} jacoco:report sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                     }
                 )

                 stage 'Push to Nexus'
                 sh "${mvnCmd} deploy -DskipTests=true"

                 stage 'Deploy DEV'
                 sh "rm -rf oc-build && mkdir -p oc-build/target"
                 sh "rm -rf oc-build && mkdir -p oc-build"
                 // clean up. keep the image stream
                 sh "oc project ${devProj}"
                 sh "oc delete bc,dc,svc,route -l app=${appName} -n ${devProj}"
                 // create build. override the exit code since it complains about exising imagestream
                 sh "oc new-build openshift/fis-java-openshift:2.0~https://github.com/srinivasa-vasu/spring-boot-camel-amq.git --name=${appName} -l app=${appName} -n dev || true"
                 // build image
                 sh "oc start-build ${appName} --wait=true -n ${devProj}"
                 // deploy image
                 sh "oc new-app ${appName} -l app=${appName} -p ACTIVEMQ_SERVICE_NAME=broker-amq -n ${devProj}"
                 //sh "oc expose svc/${appName} -n dev"

                 stage 'Deploy STAGE'
                 input message: "Promote to STAGE?", ok: "Promote"
                 sh "oc project stage"
                 // tag for stage
                 sh "oc tag dev/${appName}:latest stage/${appName}:${v}"
                 // clean up. keep the imagestream
                 sh "oc delete bc,dc,svc,route -l app=${appName} -n stage"
                 // deploy stage image
                 sh "oc new-app ${appName}:${v} -n stage"
                 sh "oc expose svc/${appName} -n stage"
              }

              def version() {
                def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
                matcher ? matcher[0][1] : null
              }
